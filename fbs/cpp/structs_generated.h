// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCTS_NETWORKMESSAGE_H_
#define FLATBUFFERS_GENERATED_STRUCTS_NETWORKMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace NetworkMessage {

struct ConEffectData;
struct ConEffectDataBuilder;
struct ConEffectData_FBS;

struct Vector3;

struct Vector3Int;

struct CreatePlayerInfo;
struct CreatePlayerInfoBuilder;
struct CreatePlayerInfo_FBS;

bool operator==(const ConEffectData_FBS &lhs, const ConEffectData_FBS &rhs);
bool operator!=(const ConEffectData_FBS &lhs, const ConEffectData_FBS &rhs);
bool operator==(const Vector3 &lhs, const Vector3 &rhs);
bool operator!=(const Vector3 &lhs, const Vector3 &rhs);
bool operator==(const Vector3Int &lhs, const Vector3Int &rhs);
bool operator!=(const Vector3Int &lhs, const Vector3Int &rhs);
bool operator==(const CreatePlayerInfo_FBS &lhs, const CreatePlayerInfo_FBS &rhs);
bool operator!=(const CreatePlayerInfo_FBS &lhs, const CreatePlayerInfo_FBS &rhs);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NetworkMessage.Vector3";
  }
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

inline bool operator==(const Vector3 &lhs, const Vector3 &rhs) {
  return
      (lhs.x() == rhs.x()) &&
      (lhs.y() == rhs.y()) &&
      (lhs.z() == rhs.z());
}

inline bool operator!=(const Vector3 &lhs, const Vector3 &rhs) {
    return !(lhs == rhs);
}


FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3Int FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  int32_t z_;

 public:
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NetworkMessage.Vector3Int";
  }
  Vector3Int()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3Int(int32_t _x, int32_t _y, int32_t _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  int32_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  int32_t z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3Int, 12);

inline bool operator==(const Vector3Int &lhs, const Vector3Int &rhs) {
  return
      (lhs.x() == rhs.x()) &&
      (lhs.y() == rhs.y()) &&
      (lhs.z() == rhs.z());
}

inline bool operator!=(const Vector3Int &lhs, const Vector3Int &rhs) {
    return !(lhs == rhs);
}


struct ConEffectData_FBS : public ::flatbuffers::NativeTable {
  typedef ConEffectData TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NetworkMessage.ConEffectData_FBS";
  }
  uint8_t count = 0;
  uint8_t concentration = 0;
  uint16_t icon = 0;
  std::string effectname{};
  std::string ownername{};
};

struct ConEffectData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConEffectData_FBS NativeTableType;
  typedef ConEffectDataBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NetworkMessage.ConEffectData";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COUNT = 4,
    VT_CONCENTRATION = 6,
    VT_ICON = 8,
    VT_EFFECTNAME = 10,
    VT_OWNERNAME = 12
  };
  uint8_t count() const {
    return GetField<uint8_t>(VT_COUNT, 0);
  }
  uint8_t concentration() const {
    return GetField<uint8_t>(VT_CONCENTRATION, 0);
  }
  uint16_t icon() const {
    return GetField<uint16_t>(VT_ICON, 0);
  }
  const ::flatbuffers::String *effectname() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTNAME);
  }
  const ::flatbuffers::String *ownername() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNERNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_COUNT, 1) &&
           VerifyField<uint8_t>(verifier, VT_CONCENTRATION, 1) &&
           VerifyField<uint16_t>(verifier, VT_ICON, 2) &&
           VerifyOffset(verifier, VT_EFFECTNAME) &&
           verifier.VerifyString(effectname()) &&
           VerifyOffset(verifier, VT_OWNERNAME) &&
           verifier.VerifyString(ownername()) &&
           verifier.EndTable();
  }
  ConEffectData_FBS *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ConEffectData_FBS *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ConEffectData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ConEffectData_FBS* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ConEffectDataBuilder {
  typedef ConEffectData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_count(uint8_t count) {
    fbb_.AddElement<uint8_t>(ConEffectData::VT_COUNT, count, 0);
  }
  void add_concentration(uint8_t concentration) {
    fbb_.AddElement<uint8_t>(ConEffectData::VT_CONCENTRATION, concentration, 0);
  }
  void add_icon(uint16_t icon) {
    fbb_.AddElement<uint16_t>(ConEffectData::VT_ICON, icon, 0);
  }
  void add_effectname(::flatbuffers::Offset<::flatbuffers::String> effectname) {
    fbb_.AddOffset(ConEffectData::VT_EFFECTNAME, effectname);
  }
  void add_ownername(::flatbuffers::Offset<::flatbuffers::String> ownername) {
    fbb_.AddOffset(ConEffectData::VT_OWNERNAME, ownername);
  }
  explicit ConEffectDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ConEffectData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ConEffectData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ConEffectData> CreateConEffectData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t count = 0,
    uint8_t concentration = 0,
    uint16_t icon = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effectname = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ownername = 0) {
  ConEffectDataBuilder builder_(_fbb);
  builder_.add_ownername(ownername);
  builder_.add_effectname(effectname);
  builder_.add_icon(icon);
  builder_.add_concentration(concentration);
  builder_.add_count(count);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ConEffectData> CreateConEffectDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t count = 0,
    uint8_t concentration = 0,
    uint16_t icon = 0,
    const char *effectname = nullptr,
    const char *ownername = nullptr) {
  auto effectname__ = effectname ? _fbb.CreateString(effectname) : 0;
  auto ownername__ = ownername ? _fbb.CreateString(ownername) : 0;
  return NetworkMessage::CreateConEffectData(
      _fbb,
      count,
      concentration,
      icon,
      effectname__,
      ownername__);
}

::flatbuffers::Offset<ConEffectData> CreateConEffectData(::flatbuffers::FlatBufferBuilder &_fbb, const ConEffectData_FBS *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CreatePlayerInfo_FBS : public ::flatbuffers::NativeTable {
  typedef CreatePlayerInfo TableType;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NetworkMessage.CreatePlayerInfo_FBS";
  }
  int32_t sessionid = 0;
  std::string name{};
  int32_t realm = 0;
  int32_t head = 0;
  std::shared_ptr<NetworkMessage::Vector3> position{};
  CreatePlayerInfo_FBS() = default;
  CreatePlayerInfo_FBS(const CreatePlayerInfo_FBS &o);
  CreatePlayerInfo_FBS(CreatePlayerInfo_FBS&&) FLATBUFFERS_NOEXCEPT = default;
  CreatePlayerInfo_FBS &operator=(CreatePlayerInfo_FBS o) FLATBUFFERS_NOEXCEPT;
};

struct CreatePlayerInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreatePlayerInfo_FBS NativeTableType;
  typedef CreatePlayerInfoBuilder Builder;
  static FLATBUFFERS_CONSTEXPR_CPP11 const char *GetFullyQualifiedName() {
    return "NetworkMessage.CreatePlayerInfo";
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4,
    VT_NAME = 6,
    VT_REALM = 8,
    VT_HEAD = 10,
    VT_POSITION = 12
  };
  int32_t sessionid() const {
    return GetField<int32_t>(VT_SESSIONID, 0);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t realm() const {
    return GetField<int32_t>(VT_REALM, 0);
  }
  int32_t head() const {
    return GetField<int32_t>(VT_HEAD, 0);
  }
  const NetworkMessage::Vector3 *position() const {
    return GetStruct<const NetworkMessage::Vector3 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SESSIONID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_REALM, 4) &&
           VerifyField<int32_t>(verifier, VT_HEAD, 4) &&
           VerifyField<NetworkMessage::Vector3>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
  CreatePlayerInfo_FBS *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CreatePlayerInfo_FBS *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CreatePlayerInfo> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CreatePlayerInfo_FBS* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CreatePlayerInfoBuilder {
  typedef CreatePlayerInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sessionid(int32_t sessionid) {
    fbb_.AddElement<int32_t>(CreatePlayerInfo::VT_SESSIONID, sessionid, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(CreatePlayerInfo::VT_NAME, name);
  }
  void add_realm(int32_t realm) {
    fbb_.AddElement<int32_t>(CreatePlayerInfo::VT_REALM, realm, 0);
  }
  void add_head(int32_t head) {
    fbb_.AddElement<int32_t>(CreatePlayerInfo::VT_HEAD, head, 0);
  }
  void add_position(const NetworkMessage::Vector3 *position) {
    fbb_.AddStruct(CreatePlayerInfo::VT_POSITION, position);
  }
  explicit CreatePlayerInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreatePlayerInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreatePlayerInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreatePlayerInfo> CreateCreatePlayerInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sessionid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t realm = 0,
    int32_t head = 0,
    const NetworkMessage::Vector3 *position = nullptr) {
  CreatePlayerInfoBuilder builder_(_fbb);
  builder_.add_position(position);
  builder_.add_head(head);
  builder_.add_realm(realm);
  builder_.add_name(name);
  builder_.add_sessionid(sessionid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CreatePlayerInfo> CreateCreatePlayerInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t sessionid = 0,
    const char *name = nullptr,
    int32_t realm = 0,
    int32_t head = 0,
    const NetworkMessage::Vector3 *position = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return NetworkMessage::CreateCreatePlayerInfo(
      _fbb,
      sessionid,
      name__,
      realm,
      head,
      position);
}

::flatbuffers::Offset<CreatePlayerInfo> CreateCreatePlayerInfo(::flatbuffers::FlatBufferBuilder &_fbb, const CreatePlayerInfo_FBS *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const ConEffectData_FBS &lhs, const ConEffectData_FBS &rhs) {
  return
      (lhs.count == rhs.count) &&
      (lhs.concentration == rhs.concentration) &&
      (lhs.icon == rhs.icon) &&
      (lhs.effectname == rhs.effectname) &&
      (lhs.ownername == rhs.ownername);
}

inline bool operator!=(const ConEffectData_FBS &lhs, const ConEffectData_FBS &rhs) {
    return !(lhs == rhs);
}


inline ConEffectData_FBS *ConEffectData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ConEffectData_FBS>(new ConEffectData_FBS());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ConEffectData::UnPackTo(ConEffectData_FBS *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = count(); _o->count = _e; }
  { auto _e = concentration(); _o->concentration = _e; }
  { auto _e = icon(); _o->icon = _e; }
  { auto _e = effectname(); if (_e) _o->effectname = _e->str(); }
  { auto _e = ownername(); if (_e) _o->ownername = _e->str(); }
}

inline ::flatbuffers::Offset<ConEffectData> ConEffectData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ConEffectData_FBS* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateConEffectData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ConEffectData> CreateConEffectData(::flatbuffers::FlatBufferBuilder &_fbb, const ConEffectData_FBS *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ConEffectData_FBS* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _count = _o->count;
  auto _concentration = _o->concentration;
  auto _icon = _o->icon;
  auto _effectname = _o->effectname.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->effectname);
  auto _ownername = _o->ownername.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->ownername);
  return NetworkMessage::CreateConEffectData(
      _fbb,
      _count,
      _concentration,
      _icon,
      _effectname,
      _ownername);
}


inline bool operator==(const CreatePlayerInfo_FBS &lhs, const CreatePlayerInfo_FBS &rhs) {
  return
      (lhs.sessionid == rhs.sessionid) &&
      (lhs.name == rhs.name) &&
      (lhs.realm == rhs.realm) &&
      (lhs.head == rhs.head) &&
      ((lhs.position == rhs.position) || (lhs.position && rhs.position && *lhs.position == *rhs.position));
}

inline bool operator!=(const CreatePlayerInfo_FBS &lhs, const CreatePlayerInfo_FBS &rhs) {
    return !(lhs == rhs);
}


inline CreatePlayerInfo_FBS::CreatePlayerInfo_FBS(const CreatePlayerInfo_FBS &o)
      : sessionid(o.sessionid),
        name(o.name),
        realm(o.realm),
        head(o.head),
        position((o.position) ? new NetworkMessage::Vector3(*o.position) : nullptr) {
}

inline CreatePlayerInfo_FBS &CreatePlayerInfo_FBS::operator=(CreatePlayerInfo_FBS o) FLATBUFFERS_NOEXCEPT {
  std::swap(sessionid, o.sessionid);
  std::swap(name, o.name);
  std::swap(realm, o.realm);
  std::swap(head, o.head);
  std::swap(position, o.position);
  return *this;
}

inline CreatePlayerInfo_FBS *CreatePlayerInfo::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CreatePlayerInfo_FBS>(new CreatePlayerInfo_FBS());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CreatePlayerInfo::UnPackTo(CreatePlayerInfo_FBS *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = sessionid(); _o->sessionid = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = realm(); _o->realm = _e; }
  { auto _e = head(); _o->head = _e; }
  { auto _e = position(); if (_e) _o->position = std::shared_ptr<NetworkMessage::Vector3>(new NetworkMessage::Vector3(*_e)); }
}

inline ::flatbuffers::Offset<CreatePlayerInfo> CreatePlayerInfo::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CreatePlayerInfo_FBS* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCreatePlayerInfo(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CreatePlayerInfo> CreateCreatePlayerInfo(::flatbuffers::FlatBufferBuilder &_fbb, const CreatePlayerInfo_FBS *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CreatePlayerInfo_FBS* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _sessionid = _o->sessionid;
  auto _name = _o->name.empty() ? _fbb.CreateSharedString("") : _fbb.CreateString(_o->name);
  auto _realm = _o->realm;
  auto _head = _o->head;
  auto _position = _o->position ? _o->position.get() : nullptr;
  return NetworkMessage::CreateCreatePlayerInfo(
      _fbb,
      _sessionid,
      _name,
      _realm,
      _head,
      _position);
}

}  // namespace NetworkMessage

#endif  // FLATBUFFERS_GENERATED_STRUCTS_NETWORKMESSAGE_H_
