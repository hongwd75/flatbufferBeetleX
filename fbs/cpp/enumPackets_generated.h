// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENUMPACKETS_NETWORKMESSAGE_H_
#define FLATBUFFERS_GENERATED_ENUMPACKETS_NETWORKMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");


namespace NetworkMessage {

enum eChatType : int8_t {
  eChatType_CT_System = 0,
  eChatType_CT_Say = 1,
  eChatType_CT_Chat = 2,
  eChatType_CT_Guild = 3,
  eChatType_CT_Help = 4,
  eChatType_MIN = eChatType_CT_System,
  eChatType_MAX = eChatType_CT_Help
};

inline const eChatType (&EnumValueseChatType())[5] {
  static const eChatType values[] = {
    eChatType_CT_System,
    eChatType_CT_Say,
    eChatType_CT_Chat,
    eChatType_CT_Guild,
    eChatType_CT_Help
  };
  return values;
}

inline const char * const *EnumNameseChatType() {
  static const char * const names[6] = {
    "CT_System",
    "CT_Say",
    "CT_Chat",
    "CT_Guild",
    "CT_Help",
    nullptr
  };
  return names;
}

inline const char *EnumNameeChatType(eChatType e) {
  if (::flatbuffers::IsOutRange(e, eChatType_CT_System, eChatType_CT_Help)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseChatType()[index];
}

enum eChatLoc : int8_t {
  eChatLoc_CL_ChatWindow = 0,
  eChatLoc_CL_PopupWindow = 1,
  eChatLoc_CL_SystemWindow = 2,
  eChatLoc_MIN = eChatLoc_CL_ChatWindow,
  eChatLoc_MAX = eChatLoc_CL_SystemWindow
};

inline const eChatLoc (&EnumValueseChatLoc())[3] {
  static const eChatLoc values[] = {
    eChatLoc_CL_ChatWindow,
    eChatLoc_CL_PopupWindow,
    eChatLoc_CL_SystemWindow
  };
  return values;
}

inline const char * const *EnumNameseChatLoc() {
  static const char * const names[4] = {
    "CL_ChatWindow",
    "CL_PopupWindow",
    "CL_SystemWindow",
    nullptr
  };
  return names;
}

inline const char *EnumNameeChatLoc(eChatLoc e) {
  if (::flatbuffers::IsOutRange(e, eChatLoc_CL_ChatWindow, eChatLoc_CL_SystemWindow)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseChatLoc()[index];
}

enum ServerPackets : uint16_t {
  ServerPackets_SC_LoginAns = 1,
  ServerPackets_SC_AccountInfo = 2,
  ServerPackets_SC_StringMessage = 3,
  ServerPackets_MIN = ServerPackets_SC_LoginAns,
  ServerPackets_MAX = ServerPackets_SC_StringMessage
};

inline const ServerPackets (&EnumValuesServerPackets())[3] {
  static const ServerPackets values[] = {
    ServerPackets_SC_LoginAns,
    ServerPackets_SC_AccountInfo,
    ServerPackets_SC_StringMessage
  };
  return values;
}

inline const char * const *EnumNamesServerPackets() {
  static const char * const names[4] = {
    "SC_LoginAns",
    "SC_AccountInfo",
    "SC_StringMessage",
    nullptr
  };
  return names;
}

inline const char *EnumNameServerPackets(ServerPackets e) {
  if (::flatbuffers::IsOutRange(e, ServerPackets_SC_LoginAns, ServerPackets_SC_StringMessage)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ServerPackets_SC_LoginAns);
  return EnumNamesServerPackets()[index];
}

enum ClientPackets : uint16_t {
  ClientPackets_CS_LoginReq = 1,
  ClientPackets_CS_WorldJoinReq = 2,
  ClientPackets_CS_UpdatePosition = 3,
  ClientPackets_MIN = ClientPackets_CS_LoginReq,
  ClientPackets_MAX = ClientPackets_CS_UpdatePosition
};

inline const ClientPackets (&EnumValuesClientPackets())[3] {
  static const ClientPackets values[] = {
    ClientPackets_CS_LoginReq,
    ClientPackets_CS_WorldJoinReq,
    ClientPackets_CS_UpdatePosition
  };
  return values;
}

inline const char * const *EnumNamesClientPackets() {
  static const char * const names[4] = {
    "CS_LoginReq",
    "CS_WorldJoinReq",
    "CS_UpdatePosition",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientPackets(ClientPackets e) {
  if (::flatbuffers::IsOutRange(e, ClientPackets_CS_LoginReq, ClientPackets_CS_UpdatePosition)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ClientPackets_CS_LoginReq);
  return EnumNamesClientPackets()[index];
}

}  // namespace NetworkMessage

#endif  // FLATBUFFERS_GENERATED_ENUMPACKETS_NETWORKMESSAGE_H_
