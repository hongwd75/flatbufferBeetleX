// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENUMPACKETS_NETWORKMESSAGE_H_
#define FLATBUFFERS_GENERATED_ENUMPACKETS_NETWORKMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");


namespace NetworkMessage {

enum eChatType : uint8_t {
  eChatType_CT_System = 0,
  eChatType_CT_Say = 1,
  eChatType_CT_Send = 2,
  eChatType_CT_Chat = 3,
  eChatType_CT_Guild = 4,
  eChatType_CT_Merchant = 5,
  eChatType_CT_Spell = 6,
  eChatType_CT_SpellExpires = 7,
  eChatType_CT_SpellResisted = 8,
  eChatType_CT_YouHit = 9,
  eChatType_CT_Loot = 10,
  eChatType_CT_Broadcast = 11,
  eChatType_CT_Help = 12,
  eChatType_CT_Staff = 13,
  eChatType_CT_PlayerDied = 14,
  eChatType_CT_KilledByEnemy = 15,
  eChatType_CT_YouDied = 16,
  eChatType_CT_Important = 17,
  eChatType_MIN = eChatType_CT_System,
  eChatType_MAX = eChatType_CT_Important
};

inline const eChatType (&EnumValueseChatType())[18] {
  static const eChatType values[] = {
    eChatType_CT_System,
    eChatType_CT_Say,
    eChatType_CT_Send,
    eChatType_CT_Chat,
    eChatType_CT_Guild,
    eChatType_CT_Merchant,
    eChatType_CT_Spell,
    eChatType_CT_SpellExpires,
    eChatType_CT_SpellResisted,
    eChatType_CT_YouHit,
    eChatType_CT_Loot,
    eChatType_CT_Broadcast,
    eChatType_CT_Help,
    eChatType_CT_Staff,
    eChatType_CT_PlayerDied,
    eChatType_CT_KilledByEnemy,
    eChatType_CT_YouDied,
    eChatType_CT_Important
  };
  return values;
}

inline const char * const *EnumNameseChatType() {
  static const char * const names[19] = {
    "CT_System",
    "CT_Say",
    "CT_Send",
    "CT_Chat",
    "CT_Guild",
    "CT_Merchant",
    "CT_Spell",
    "CT_SpellExpires",
    "CT_SpellResisted",
    "CT_YouHit",
    "CT_Loot",
    "CT_Broadcast",
    "CT_Help",
    "CT_Staff",
    "CT_PlayerDied",
    "CT_KilledByEnemy",
    "CT_YouDied",
    "CT_Important",
    nullptr
  };
  return names;
}

inline const char *EnumNameeChatType(eChatType e) {
  if (::flatbuffers::IsOutRange(e, eChatType_CT_System, eChatType_CT_Important)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseChatType()[index];
}

enum eChatLoc : uint8_t {
  eChatLoc_CL_ChatWindow = 0,
  eChatLoc_CL_PopupWindow = 1,
  eChatLoc_CL_SystemWindow = 2,
  eChatLoc_MIN = eChatLoc_CL_ChatWindow,
  eChatLoc_MAX = eChatLoc_CL_SystemWindow
};

inline const eChatLoc (&EnumValueseChatLoc())[3] {
  static const eChatLoc values[] = {
    eChatLoc_CL_ChatWindow,
    eChatLoc_CL_PopupWindow,
    eChatLoc_CL_SystemWindow
  };
  return values;
}

inline const char * const *EnumNameseChatLoc() {
  static const char * const names[4] = {
    "CL_ChatWindow",
    "CL_PopupWindow",
    "CL_SystemWindow",
    nullptr
  };
  return names;
}

inline const char *EnumNameeChatLoc(eChatLoc e) {
  if (::flatbuffers::IsOutRange(e, eChatLoc_CL_ChatWindow, eChatLoc_CL_SystemWindow)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseChatLoc()[index];
}

enum eDialogType : uint8_t {
  eDialogType_Ok = 0,
  eDialogType_Warmap = 1,
  eDialogType_YesNo = 1,
  eDialogType_MIN = eDialogType_Ok,
  eDialogType_MAX = eDialogType_YesNo
};

inline const eDialogType (&EnumValueseDialogType())[3] {
  static const eDialogType values[] = {
    eDialogType_Ok,
    eDialogType_Warmap,
    eDialogType_YesNo
  };
  return values;
}

inline const char * const *EnumNameseDialogType() {
  static const char * const names[3] = {
    "Ok",
    "Warmap",
    "YesNo",
    nullptr
  };
  return names;
}

inline const char *EnumNameeDialogType(eDialogType e) {
  if (::flatbuffers::IsOutRange(e, eDialogType_Ok, eDialogType_YesNo)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseDialogType()[index];
}

enum eDialogCode : uint8_t {
  eDialogCode_SimpleWarning = 0,
  eDialogCode_GuildInvite = 3,
  eDialogCode_GroupInvite = 5,
  eDialogCode_CustomDialog = 6,
  eDialogCode_GuildLeave = 8,
  eDialogCode_MIN = eDialogCode_SimpleWarning,
  eDialogCode_MAX = eDialogCode_GuildLeave
};

inline const eDialogCode (&EnumValueseDialogCode())[5] {
  static const eDialogCode values[] = {
    eDialogCode_SimpleWarning,
    eDialogCode_GuildInvite,
    eDialogCode_GroupInvite,
    eDialogCode_CustomDialog,
    eDialogCode_GuildLeave
  };
  return values;
}

inline const char * const *EnumNameseDialogCode() {
  static const char * const names[10] = {
    "SimpleWarning",
    "",
    "",
    "GuildInvite",
    "",
    "GroupInvite",
    "CustomDialog",
    "",
    "GuildLeave",
    nullptr
  };
  return names;
}

inline const char *EnumNameeDialogCode(eDialogCode e) {
  if (::flatbuffers::IsOutRange(e, eDialogCode_SimpleWarning, eDialogCode_GuildLeave)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseDialogCode()[index];
}

enum ServerPackets : uint16_t {
  ServerPackets_SC_LoginAns = 1,
  ServerPackets_SC_AccountInfo = 2,
  ServerPackets_SC_WorldEnterNotify = 3,
  ServerPackets_SC_CreatePlayer = 4,
  ServerPackets_SC_CreatePlayers = 5,
  ServerPackets_SC_RemovePlayer = 6,
  ServerPackets_SC_PlayerUpdate = 7,
  ServerPackets_SC_VariousUpdate = 8,
  ServerPackets_SC_UpdatePosition = 9,
  ServerPackets_SC_ObjectUpdate = 10,
  ServerPackets_SC_CharacterStatusUpdate = 11,
  ServerPackets_SC_UpdateIcons = 12,
  ServerPackets_SC_PlayerCreate = 13,
  ServerPackets_SC_MovingObjectCreate = 14,
  ServerPackets_SC_ObjectGuildID = 15,
  ServerPackets_SC_NPCCreate = 16,
  ServerPackets_SC_ObjectCreate = 17,
  ServerPackets_SC_ModelChange = 18,
  ServerPackets_SC_RemoveObject = 19,
  ServerPackets_SC_ConcentrationList = 20,
  ServerPackets_SC_CombatAnimation = 21,
  ServerPackets_SC_SpellCastAnimation = 22,
  ServerPackets_SC_SpellEffectAnimation = 23,
  ServerPackets_SC_EmoteAnimation = 24,
  ServerPackets_SC_StringMessage = 25,
  ServerPackets_SC_DialogBoxMessage = 26,
  ServerPackets_SC_CheckLOSRequest = 27,
  ServerPackets_SC_MaxSpeed = 28,
  ServerPackets_SC_Quit = 29,
  ServerPackets_MIN = ServerPackets_SC_LoginAns,
  ServerPackets_MAX = ServerPackets_SC_Quit
};

inline const ServerPackets (&EnumValuesServerPackets())[29] {
  static const ServerPackets values[] = {
    ServerPackets_SC_LoginAns,
    ServerPackets_SC_AccountInfo,
    ServerPackets_SC_WorldEnterNotify,
    ServerPackets_SC_CreatePlayer,
    ServerPackets_SC_CreatePlayers,
    ServerPackets_SC_RemovePlayer,
    ServerPackets_SC_PlayerUpdate,
    ServerPackets_SC_VariousUpdate,
    ServerPackets_SC_UpdatePosition,
    ServerPackets_SC_ObjectUpdate,
    ServerPackets_SC_CharacterStatusUpdate,
    ServerPackets_SC_UpdateIcons,
    ServerPackets_SC_PlayerCreate,
    ServerPackets_SC_MovingObjectCreate,
    ServerPackets_SC_ObjectGuildID,
    ServerPackets_SC_NPCCreate,
    ServerPackets_SC_ObjectCreate,
    ServerPackets_SC_ModelChange,
    ServerPackets_SC_RemoveObject,
    ServerPackets_SC_ConcentrationList,
    ServerPackets_SC_CombatAnimation,
    ServerPackets_SC_SpellCastAnimation,
    ServerPackets_SC_SpellEffectAnimation,
    ServerPackets_SC_EmoteAnimation,
    ServerPackets_SC_StringMessage,
    ServerPackets_SC_DialogBoxMessage,
    ServerPackets_SC_CheckLOSRequest,
    ServerPackets_SC_MaxSpeed,
    ServerPackets_SC_Quit
  };
  return values;
}

inline const char * const *EnumNamesServerPackets() {
  static const char * const names[30] = {
    "SC_LoginAns",
    "SC_AccountInfo",
    "SC_WorldEnterNotify",
    "SC_CreatePlayer",
    "SC_CreatePlayers",
    "SC_RemovePlayer",
    "SC_PlayerUpdate",
    "SC_VariousUpdate",
    "SC_UpdatePosition",
    "SC_ObjectUpdate",
    "SC_CharacterStatusUpdate",
    "SC_UpdateIcons",
    "SC_PlayerCreate",
    "SC_MovingObjectCreate",
    "SC_ObjectGuildID",
    "SC_NPCCreate",
    "SC_ObjectCreate",
    "SC_ModelChange",
    "SC_RemoveObject",
    "SC_ConcentrationList",
    "SC_CombatAnimation",
    "SC_SpellCastAnimation",
    "SC_SpellEffectAnimation",
    "SC_EmoteAnimation",
    "SC_StringMessage",
    "SC_DialogBoxMessage",
    "SC_CheckLOSRequest",
    "SC_MaxSpeed",
    "SC_Quit",
    nullptr
  };
  return names;
}

inline const char *EnumNameServerPackets(ServerPackets e) {
  if (::flatbuffers::IsOutRange(e, ServerPackets_SC_LoginAns, ServerPackets_SC_Quit)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ServerPackets_SC_LoginAns);
  return EnumNamesServerPackets()[index];
}

enum ClientPackets : uint16_t {
  ClientPackets_CS_LoginReq = 1,
  ClientPackets_CS_WorldJoinReq = 2,
  ClientPackets_CS_UpdatePosition = 3,
  ClientPackets_MIN = ClientPackets_CS_LoginReq,
  ClientPackets_MAX = ClientPackets_CS_UpdatePosition
};

inline const ClientPackets (&EnumValuesClientPackets())[3] {
  static const ClientPackets values[] = {
    ClientPackets_CS_LoginReq,
    ClientPackets_CS_WorldJoinReq,
    ClientPackets_CS_UpdatePosition
  };
  return values;
}

inline const char * const *EnumNamesClientPackets() {
  static const char * const names[4] = {
    "CS_LoginReq",
    "CS_WorldJoinReq",
    "CS_UpdatePosition",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientPackets(ClientPackets e) {
  if (::flatbuffers::IsOutRange(e, ClientPackets_CS_LoginReq, ClientPackets_CS_UpdatePosition)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(ClientPackets_CS_LoginReq);
  return EnumNamesClientPackets()[index];
}

enum eEmote : uint8_t {
  eEmote_Beckon = 1,
  eEmote_Blush = 2,
  eEmote_Bow = 3,
  eEmote_Cheer = 4,
  eEmote_Clap = 5,
  eEmote_Cry = 6,
  eEmote_Curtsey = 7,
  eEmote_Flex = 8,
  eEmote_BlowKiss = 9,
  eEmote_Dance = 10,
  eEmote_Laugh = 11,
  eEmote_Point = 12,
  eEmote_Salute = 13,
  eEmote_BangOnShield = 14,
  eEmote_Victory = 15,
  eEmote_Wave = 16,
  eEmote_Distract = 17,
  eEmote_MidgardFrenzy = 18,
  eEmote_ThrowDirt = 19,
  eEmote_StagFrenzy = 20,
  eEmote_Roar = 21,
  eEmote_Drink = 22,
  eEmote_Ponder = 23,
  eEmote_Military = 24,
  eEmote_Present = 25,
  eEmote_Rude = 27,
  eEmote_Taunt = 28,
  eEmote_Hug = 29,
  eEmote_LetsGo = 30,
  eEmote_Meditate = 31,
  eEmote_No = 32,
  eEmote_Raise = 33,
  eEmote_Shrug = 34,
  eEmote_Slap = 35,
  eEmote_Slit = 36,
  eEmote_Surrender = 37,
  eEmote_Yes = 38,
  eEmote_Beg = 39,
  eEmote_Induct = 40,
  eEmote_Dismiss = 41,
  eEmote_LvlUp = 42,
  eEmote_Pray = 43,
  eEmote_Bind = 44,
  eEmote_SpellGoBoom = 45,
  eEmote_Knock = 46,
  eEmote_Smile = 47,
  eEmote_Angry = 48,
  eEmote_Rider_LookFar = 49,
  eEmote_Rider_Stench = 50,
  eEmote_Rider_Halt = 51,
  eEmote_Rider_pet = 52,
  eEmote_Horse_Courbette = 53,
  eEmote_Horse_Startle = 54,
  eEmote_Horse_Nod = 55,
  eEmote_Horse_Graze = 56,
  eEmote_Horse_rear = 57,
  eEmote_Sweat = 58,
  eEmote_Stagger = 59,
  eEmote_Rider_Trick = 60,
  eEmote_Yawn = 61,
  eEmote_Doh = 62,
  eEmote_Confused = 63,
  eEmote_Shiver = 64,
  eEmote_Rofl = 65,
  eEmote_Mememe = 66,
  eEmote_Horse_whistle = 67,
  eEmote_Worship = 68,
  eEmote_PlayerPrepare = 69,
  eEmote_PlayerPickup = 70,
  eEmote_PlayerListen = 71,
  eEmote_BindAlb = 73,
  eEmote_BindMid = 74,
  eEmote_BindHib = 75,
  eEmote_Howl = 76,
  eEmote_Diabolical = 77,
  eEmote_Brandish = 79,
  eEmote_Startled = 80,
  eEmote_Talk = 81,
  eEmote_Monty = 84,
  eEmote_Loco = 85,
  eEmote_Cower = 91,
  eEmote_SiegeWeaponEmote = 201,
  eEmote_MIN = eEmote_Beckon,
  eEmote_MAX = eEmote_SiegeWeaponEmote
};

inline const eEmote (&EnumValueseEmote())[82] {
  static const eEmote values[] = {
    eEmote_Beckon,
    eEmote_Blush,
    eEmote_Bow,
    eEmote_Cheer,
    eEmote_Clap,
    eEmote_Cry,
    eEmote_Curtsey,
    eEmote_Flex,
    eEmote_BlowKiss,
    eEmote_Dance,
    eEmote_Laugh,
    eEmote_Point,
    eEmote_Salute,
    eEmote_BangOnShield,
    eEmote_Victory,
    eEmote_Wave,
    eEmote_Distract,
    eEmote_MidgardFrenzy,
    eEmote_ThrowDirt,
    eEmote_StagFrenzy,
    eEmote_Roar,
    eEmote_Drink,
    eEmote_Ponder,
    eEmote_Military,
    eEmote_Present,
    eEmote_Rude,
    eEmote_Taunt,
    eEmote_Hug,
    eEmote_LetsGo,
    eEmote_Meditate,
    eEmote_No,
    eEmote_Raise,
    eEmote_Shrug,
    eEmote_Slap,
    eEmote_Slit,
    eEmote_Surrender,
    eEmote_Yes,
    eEmote_Beg,
    eEmote_Induct,
    eEmote_Dismiss,
    eEmote_LvlUp,
    eEmote_Pray,
    eEmote_Bind,
    eEmote_SpellGoBoom,
    eEmote_Knock,
    eEmote_Smile,
    eEmote_Angry,
    eEmote_Rider_LookFar,
    eEmote_Rider_Stench,
    eEmote_Rider_Halt,
    eEmote_Rider_pet,
    eEmote_Horse_Courbette,
    eEmote_Horse_Startle,
    eEmote_Horse_Nod,
    eEmote_Horse_Graze,
    eEmote_Horse_rear,
    eEmote_Sweat,
    eEmote_Stagger,
    eEmote_Rider_Trick,
    eEmote_Yawn,
    eEmote_Doh,
    eEmote_Confused,
    eEmote_Shiver,
    eEmote_Rofl,
    eEmote_Mememe,
    eEmote_Horse_whistle,
    eEmote_Worship,
    eEmote_PlayerPrepare,
    eEmote_PlayerPickup,
    eEmote_PlayerListen,
    eEmote_BindAlb,
    eEmote_BindMid,
    eEmote_BindHib,
    eEmote_Howl,
    eEmote_Diabolical,
    eEmote_Brandish,
    eEmote_Startled,
    eEmote_Talk,
    eEmote_Monty,
    eEmote_Loco,
    eEmote_Cower,
    eEmote_SiegeWeaponEmote
  };
  return values;
}

inline const char * const *EnumNameseEmote() {
  static const char * const names[202] = {
    "Beckon",
    "Blush",
    "Bow",
    "Cheer",
    "Clap",
    "Cry",
    "Curtsey",
    "Flex",
    "BlowKiss",
    "Dance",
    "Laugh",
    "Point",
    "Salute",
    "BangOnShield",
    "Victory",
    "Wave",
    "Distract",
    "MidgardFrenzy",
    "ThrowDirt",
    "StagFrenzy",
    "Roar",
    "Drink",
    "Ponder",
    "Military",
    "Present",
    "",
    "Rude",
    "Taunt",
    "Hug",
    "LetsGo",
    "Meditate",
    "No",
    "Raise",
    "Shrug",
    "Slap",
    "Slit",
    "Surrender",
    "Yes",
    "Beg",
    "Induct",
    "Dismiss",
    "LvlUp",
    "Pray",
    "Bind",
    "SpellGoBoom",
    "Knock",
    "Smile",
    "Angry",
    "Rider_LookFar",
    "Rider_Stench",
    "Rider_Halt",
    "Rider_pet",
    "Horse_Courbette",
    "Horse_Startle",
    "Horse_Nod",
    "Horse_Graze",
    "Horse_rear",
    "Sweat",
    "Stagger",
    "Rider_Trick",
    "Yawn",
    "Doh",
    "Confused",
    "Shiver",
    "Rofl",
    "Mememe",
    "Horse_whistle",
    "Worship",
    "PlayerPrepare",
    "PlayerPickup",
    "PlayerListen",
    "",
    "BindAlb",
    "BindMid",
    "BindHib",
    "Howl",
    "Diabolical",
    "",
    "Brandish",
    "Startled",
    "Talk",
    "",
    "",
    "Monty",
    "Loco",
    "",
    "",
    "",
    "",
    "",
    "Cower",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "SiegeWeaponEmote",
    nullptr
  };
  return names;
}

inline const char *EnumNameeEmote(eEmote e) {
  if (::flatbuffers::IsOutRange(e, eEmote_Beckon, eEmote_SiegeWeaponEmote)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(eEmote_Beckon);
  return EnumNameseEmote()[index];
}

}  // namespace NetworkMessage

#endif  // FLATBUFFERS_GENERATED_ENUMPACKETS_NETWORKMESSAGE_H_
